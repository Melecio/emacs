;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables (list 
   (semanticdb-table "jde.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jde-version" variable (:constant-flag t :default-value "2.3.5.1") nil [1355 1411]) ("jde-cedet-min-version" variable (:constant-flag t :default-value "1.0beta2") nil [1413 1482]) ("jde-cedet-max-version" variable (:constant-flag t :default-value "1.0") nil [1483 1547]) ("jde-xemacsp" variable (:constant-flag t :default-value (string-match "XEmacs" (emacs-version))) nil [1549 1668]) ("jde-xemacs20p" variable (:constant-flag t :default-value (and jde-xemacsp (>= emacs-major-version 20))) nil [1670 1740]) ("jde-emacs21p" variable (:constant-flag t :default-value (and (string-match "\\bEmacs\\b" (emacs-version)) (>= emacs-major-version 21))) nil [1743 1852]) ("unless" code nil nil [1854 1939]) ("jde-util" include nil nil [1942 1961]) ("unless" code nil nil [2165 2307]) ("jde-custom" include nil nil [2309 2330]) ("jde-help" include nil nil [2331 2350]) ("semantic-load" include nil nil [2351 2375]) ("easymenu" include nil nil [2376 2395]) ("cl" include nil nil [2396 2409]) ("font-lock" include nil nil [2410 2430]) ("cc-mode" include nil nil [2431 2449]) ("cus-edit" include nil nil [2450 2469]) ("comint" include nil nil [2470 2487]) ("jde-compile" include nil nil [2488 2510]) ("jde-db" include nil nil [2511 2528]) ("jde-bug" include nil nil [2529 2547]) ("jde-jdb" include nil nil [2548 2566]) ("jde-run" include nil nil [2567 2585]) ("jde-gen" include nil nil [2586 2604]) ("compile" include nil nil [2605 2623]) ("imenu" include nil nil [2624 2640]) ("browse-url" include nil nil [2641 2662]) ("beanshell" include nil nil [2663 2683]) ("jde-plugins" include nil nil [2684 2706]) ("jde-wiz" include nil nil [2707 2725]) ("jde-java-grammar" include nil nil [2726 2753]) ("jde-complete" include nil nil [2754 2777]) ("jde-which-method" include nil nil [2778 2805]) ("jde-java-font-lock" include nil nil [2806 2835]) ("jde-import" include nil nil [2836 2857]) ("jde-class" include nil nil [2858 2878]) ("executable" include nil nil [2879 2900]) ("efc" include nil nil [2934 2948]) ("jde-open-source" include nil nil [2949 2975]) ("jde-annotations" include nil nil [2976 3002]) ("etags" include nil nil [3003 3019]) ("regress" include nil nil [3020 3038]) ("if" code nil nil [3040 3128]) ("defgroup" code nil nil [3131 3215]) ("jde-check-version-flag" variable (:user-visible-flag t :default-value t) nil [3218 3533]) ("jde-key-bindings" variable (:user-visible-flag t :default-value (list (cons "[? ? ?]" (quote jde-run-menu-run-applet)) (cons "[? ? ?]" (quote jde-build)) (cons "[? ? ?]" (quote jde-compile)) (cons "[? ? ?]" (quote jde-debug)) (cons "[? ? ?]" (quote jde-find)) (cons "[? ? ?]" (quote jde-open-class-at-point)) (cons "[? ? ?]" (quote jde-bsh-run)) (cons "[? ? ?]" (quote jde-gen-println)) (cons "[? ? ?]" (quote jde-help-browse-jdk-doc)) (cons "[? ? ?]" (quote jde-save-project)) (cons "[? ? ?]" (quote jde-wiz-update-class-list)) (cons "[? ? ?]" (quote jde-run)) (cons "[? ? ?]" (quote speedbar-frame-mode)) (cons "[? ? ?]" (quote jde-jdb-menu-debug-applet)) (cons "[? ? ?]" (quote jde-help-symbol)) (cons "[? ? ?]" (quote jde-show-superclass-source)) (cons "[? ? ?]" (quote jde-open-class-at-point)) (cons "[? ? ?]" (quote jde-import-find-and-import)) (cons "[? ? ?e]" (quote jde-wiz-extend-abstract-class)) (cons "[? ? ?f]" (quote jde-gen-try-finally-wrapper)) (cons "[? ? ?i]" (quote jde-wiz-implement-interface)) (cons "[? ? ?j]" (quote jde-javadoc-autodoc-at-line)) (cons "[? ? ?o]" (quote jde-wiz-override-method)) (cons "[? ? ?t]" (quote jde-gen-try-catch-wrapper)) (cons "[? ? ?z]" (quote jde-import-all)) (cons "[? ? ?]" (quote jde-run-etrace-prev)) (cons "[? ? ?]" (quote jde-run-etrace-next)) (cons "[(control c) (control v) (control ?.)]" (quote jde-complete)) (cons "[(control c) (control v) ?.]" (quote jde-complete-in-line)))) nil [3569 6565]) ("jde-launch-beanshell-on-demand-p" variable (:default-value t) nil [6567 6839]) ("jde-java-environment-variables" variable (:default-value (quote ("JAVA_VERSION" "JAVA_HOME"))) nil [6843 7239]) ("jde-set-jdk-dir-type" function (:arguments ("sym" "val")) nil [7241 7940]) ("jde-jdk-registry" variable nil nil [7976 8567]) ("jde-jdk" variable nil nil [8594 9550]) ("jde-find-jdk-in-exec-path" function nil nil [9553 10325]) ("jde-get-jdk-dir" function (:user-visible-flag t) nil [10328 12026]) ("jde-get-jdk-prog" function (:arguments ("progname")) nil [12029 12711]) ("jde-get-tools-jar" function nil nil [12714 13220]) ("jde-java-version-cache" variable nil nil [13222 13305]) ("jde-java-version-via-java" function nil nil [13307 13827]) ("jde-java-version" function (:user-visible-flag t) nil [13829 14445]) ("jde-java-major-version" function nil nil [14447 14774]) ("jde-java-minor-version" function nil nil [14776 15103]) ("jde-jdk-doc-url" variable (:user-visible-flag t) nil [15138 15462]) ("jde-global-classpath" variable nil nil [15501 17498]) ("jde-quote-classpath" variable (:user-visible-flag t :default-value t) nil [17500 17726]) ("jde-expand-classpath-p" variable (:default-value t) nil [17728 17950]) ("jde-lib-directory-names" variable (:default-value (list "^lib" "^jar")) nil [17993 18279]) ("jde-lib-excluded-file-names" variable nil nil [18281 18541]) ("jde-sourcepath" variable (:user-visible-flag t) nil [18576 19004]) ("jde-build-function" variable (:user-visible-flag t :default-value (quote (jde-make))) nil [19043 19661]) ("jde-debugger" variable (:default-value (list "jdb")) nil [19692 20609]) ("jde-devel-debug" variable nil nil [20611 20848]) ("jde-enable-senator" variable (:default-value t) nil [20887 21496]) ("jde-enable-abbrev-mode" variable (:user-visible-flag t) nil [21501 22021]) ("jde-mode-abbreviations" variable (:user-visible-flag t :default-value (list (cons "ab" "abstract") (cons "bo" "boolean") (cons "br" "break") (cons "by" "byte") (cons "byv" "byvalue") (cons "cas" "cast") (cons "ca" "catch") (cons "ch" "char") (cons "cl" "class") (cons "co" "const") (cons "con" "continue") (cons "de" "default") (cons "dou" "double") (cons "el" "else") (cons "ex" "extends") (cons "fa" "false") (cons "fi" "final") (cons "fin" "finally") (cons "fl" "float") (cons "fo" "for") (cons "fu" "future") (cons "ge" "generic") (cons "go" "goto") (cons "impl" "implements") (cons "impo" "import") (cons "ins" "instanceof") (cons "in" "int") (cons "inte" "interface") (cons "lo" "long") (cons "na" "native") (cons "ne" "new") (cons "nu" "null") (cons "pa" "package") (cons "pri" "private") (cons "pro" "protected") (cons "pu" "public") (cons "re" "return") (cons "sh" "short") (cons "st" "static") (cons "su" "super") (cons "sw" "switch") (cons "sy" "synchronized") (cons "th" "this") (cons "thr" "throw") (cons "thro" "throws") (cons "tra" "transient") (cons "tr" "true") (cons "vo" "void") (cons "vol" "volatile") (cons "wh" "while"))) nil [22023 24037]) ("jde-init-abbrev-table" function (:user-visible-flag t) nil [24039 25043]) ("jde-abbrev-mode" function (:user-visible-flag t) nil [25109 25574]) ("jde-show-abbrevs" function (:user-visible-flag t) nil [25576 25975]) ("jde-classpath-separator" variable (:default-value (if (member system-type (quote (cygwin32 cygwin))) ";" path-separator)) nil [25978 26168]) ("jde-set-global-classpath" function (:user-visible-flag t :arguments ("classpath")) nil [26186 26496]) ("jde-show-run-options" function (:user-visible-flag t) nil [26501 26632]) ("jde-show-debug-options" function (:user-visible-flag t) nil [26634 26768]) ("jde-show-project-options" function (:user-visible-flag t) nil [26770 26903]) ("jde-show-autocode-options" function (:user-visible-flag t) nil [26905 27030]) ("jde-show-wiz-options" function (:user-visible-flag t) nil [27032 27159]) ("jde-show-complete-options" function (:user-visible-flag t) nil [27161 27299]) ("jde-build" function (:user-visible-flag t) nil [27316 27499]) ("derived-mode-init-mode-variables" code nil nil [27792 27836]) ("put" code nil nil [27837 27884]) ("jde-mode" function (:user-visible-flag t) nil [27901 31981]) ("jde-check-versions-message" variable (:constant-flag t :default-value "JDEE requires a version of CEDET between %s and %s (found %s)") nil [32007 32111]) ("jde-check-versions" function nil nil [32114 32961]) ("jde-check-version" function (:arguments ("current-version" "min-version" "max-version")) nil [32964 33435]) ("jde-earlier-versionp" function (:arguments ("ver1" "ver2")) nil [33437 33938]) ("jde-log-max" variable (:user-visible-flag t :default-value 500) nil [33947 34212]) ("jde-log-msg" function (:arguments ("msg" "&rest" "args")) nil [34214 34846]) ("jde-log-msg-t" function (:arguments ("msg" "&rest" "args")) nil [34848 35065]) ("jde-log-msg-nil" function (:arguments ("msg" "&rest" "args")) nil [35067 35292]) ("add-to-list" code nil nil [35466 35523]) ("jde-menu-definition" variable (:user-visible-flag t :default-value (list "JDE" ["Compile" jde-compile t] ["Run App" jde-run t] ["Debug App" jde-debug t] "-" ["Run Applet" jde-run-menu-run-applet t] ["Debug Applet" jde-debug-applet t] "-" ["Build" jde-build t] (list "Find" ["Expression" jde-find (and (executable-find (if (eq system-type (quote windows-nt)) "find.exe" "find")) (executable-find (if (eq system-type (quote windows-nt)) "grep.exe" "grep")))] ["Expression..." jde-find-dlg (and (executable-find (if (eq system-type (quote windows-nt)) "find.exe" "find")) (executable-find (if (eq system-type (quote windows-nt)) "grep.exe" "grep")))] ["Symbol Definition" jde-open-class-at-point t] ["Class" jde-show-class-source t] ["Super Class" jde-show-superclass-source t] ["Interface" jde-show-interface-source t]) (list "Interpreter" ["Start" jde-bsh-run t] ["Exit" jde-bsh-exit t] "-" ["Help" jde-help-beanshell t]) (list "Documentation" ["Add" jde-javadoc-autodoc-at-line (jde-javadoc-enable-menu-p)] ["Remove" jde-javadoc-remdoc-at-line (jde-javadoc-enable-menu-p)] ["Check This" jde-javadoc-checkdoc-at-line (jde-javadoc-enable-menu-p)] ["Check All" jde-javadoc-checkdoc t] ["Generate All" jde-javadoc-make t] ["Generate Buffer" jde-javadoc-make-buffer t] "-" ["Javadoc Reference" jde-javadoc-browse-tool-doc t]) "-" (list "Code Generation" (list "Templates" ["Get/Set Pair..." jde-gen-get-set t] ["Println..." jde-gen-println t] (list "Listener" ["Action" jde-gen-action-listener t] ["Change" jde-gen-change-listener t] ["Window" jde-gen-window-listener t] ["Mouse" jde-gen-mouse-listener t]) ["Other..." jde-gen-code t]) (list "Import" ["Class..." jde-import-find-and-import t] ["All" jde-import-all t] ["All Unique" jde-import-all-unique t] "-" ["Expand Package Imports" jde-import-expand-imports t] ["Collapse Class Imports" jde-import-collapse-imports t] ["Delete Unneeded" jde-import-kill-extra-imports t] ["Organize Imports" jde-import-organize t] ["Show Unimported Classes" jde-import-all-show t]) (list "Wizards" ["Override Method" jde-wiz-override-method t] ["Implement Interface..." jde-wiz-implement-interface t] ["Generate Get/Set Methods" jde-wiz-get-set-methods t] ["Generate toString Method" jde-wiz-tostring t] ["Update Package Statement" jde-package-update t] ["Implement Event Source..." jde-wiz-implement-event-source t] ["Extend Abstract Class..." jde-wiz-extend-abstract-class t] ["Delegate Methods..." jde-wiz-delegate t] "-" ["Update Class List" jde-wiz-update-class-list t]) (list "Modes" (vector "Abbrev" (quote jde-abbrev-mode) (if (featurep (quote xemacs)) :active :enable) t :style (quote toggle) :selected (quote jde-enable-abbrev-mode)) (vector "Electric Return" (quote jde-electric-return-mode) (if (featurep (quote xemacs)) :active :enable) t :style (quote toggle) :selected (quote jde-electric-return-mode)))) (list "Browse" ["Source Files" jde-show-speedbar t] ["Class at Point" jde-browse-class-at-point t]) ["Check Style" jde-checkstyle] (list "Project" (vector "Auto Switch" (quote jde-toggle-project-switching) (if jde-xemacsp :active :enable) t :style (quote toggle) :selected (quote jde-project-context-switching-enabled-p)) (list "Options" ["General" jde-show-project-options t] ["Compile" jde-compile-show-options-buffer t] ["Run" jde-show-run-options t] ["Debug" jde-show-debug-options t] ["Autocode" jde-show-autocode-options t] ["Javadoc" jde-javadoc-customize t] ["Make" jde-make-show-options t] ["Ant" jde-ant-show-options t] ["Complete" jde-show-complete-options t] ["Wiz" jde-show-wiz-options t]) (list "Project File" ["Create New" jde-create-new-project t] ["Save" jde-save-project t] ["Load" jde-load-project-file t] ["Load All" jde-load-all-project-files t])) (list "Help" ["JDEE Users Guide" jde-show-help t] ["JDK" jde-help-browse-jdk-doc t] ["JDEE Key Bindings" jde-keys t] "-" ["Class..." jde-help-class t] ["Class Member..." jde-help-class-member t] ["Symbol at Point" jde-help-symbol t] "-" ["Submit problem report" jde-submit-problem-report t] "-" (concat "JDE " jde-version)))) nil [35525 41367]) ("jde-insert-menu-in-xemacs-menubar" function nil nil [41370 41732]) ("jde-new-buffer-menu" variable (:user-visible-flag t :default-value (list "JDE New" ["Class..." jde-gen-class-buffer t] ["Interface..." jde-gen-interface-buffer t] ["Console..." jde-gen-console-buffer t] ["Bean..." jde-gen-bean-buffer t] ["Unit Test..." jde-junit-test-class-buffer t] (list "EJB" ["Session Bean" jde-ejb-session-bean-buffer t] ["Entity Bean" jde-ejb-entity-bean-buffer t]) ["Other..." jde-gen-buffer t])) nil [41735 42706]) ("jde-cygpath" function (:user-visible-flag t :arguments ("path" "&optional" "direction")) nil [43114 43956]) ("jde-cygwin-root-cache" variable nil nil [43958 44044]) ("jde-cygwin-path-converter-cygpath" function (:arguments ("path")) nil [44046 44967]) ("jde-cygwin-path-converter-internal" function (:user-visible-flag t :arguments ("path")) nil [44974 46124]) ("jde-cygwin-path-converter" variable (:default-value (quote (jde-cygwin-path-converter-internal))) nil [46126 47094]) ("jde-convert-cygwin-path" function (:user-visible-flag t :arguments ("path" "&optional" "separator")) nil [47106 47443]) ("jde-resolve-relative-paths-p" variable (:default-value t) nil [47445 47829]) ("jde-normalize-path" function (:arguments ("path" "&optional" "symbol")) nil [47831 51293]) ("jde-expand-directory" function (:arguments ("dir" "include-regexp" "exclude-regexps" "symbol")) nil [51296 51892]) ("jde-expand-classpath" function (:arguments ("classpath" "&optional" "symbol")) nil [51895 52958]) ("jde-build-classpath" function (:arguments ("paths" "&optional" "symbol" "quote-path-p")) nil [52961 53526]) ("jde-global-classpath" function nil nil [53528 53684]) ("jde-build-path-arg" function (:arguments ("arg" "path-list" "&optional" "quote" "symbol")) nil [53687 53964]) ("jde-build-classpath-arg" function (:arguments ("path-list" "&optional" "quote" "symbol")) nil [53967 54133]) ("jde-root-dir-p" function (:arguments ("dir")) nil [54135 55505]) ("jde-get-global-classpath" function nil nil [55507 56086]) ("jde-entering-java-buffer-hook" variable (:user-visible-flag t :default-value (quote (jde-reload-project-file jde-which-method-update-on-entering-buffer))) nil [56090 56635]) ("jde-current-buffer" variable (:user-visible-flag t :default-value (current-buffer)) nil [56637 56746]) ("jde-detect-java-buffer-activation" function nil nil [56748 57277]) ("jde-monitor-post-command-hook" function nil nil [57279 57612]) ("jde-monitor-post-command-hook-timer" variable nil nil [57614 57733]) ("jde-count-open-java-buffers" function nil nil [57735 58037]) ("jde-clean-up-after-jde" function nil nil [58042 58535]) ("jde-find-jde-doc-directory" function nil nil [58550 59005]) ("jde-show-help" function (:user-visible-flag t) nil [59022 59594]) ("jde-problem-report-mail-address" variable (:default-value "pkinnucan@comcast.net") nil [59686 59751]) ("jde-submit-problem-report" function (:user-visible-flag t) nil [59753 60399]) ("jde-problem-report-post-hooks" function nil nil [60402 65384]) ("jde-problem-report-list-all-variables" function nil nil [65386 65616]) ("eval-when" code nil nil [65646 65686]) ("jde-setnu-deletion-check" variable (:default-value t) nil [65688 65740]) ("make-variable-buffer-local" code nil nil [65741 65795]) ("jde-setnu-after-change" function (:arguments ("start" "end" "length")) nil [65797 66227]) ("jde-setnu-before-change" function (:arguments ("start" "end")) nil [66229 66476]) ("jde-setnu-mode-threshold" variable (:default-value 20000) nil [66479 66649]) ("jde-setnu-mode-enable" variable nil nil [66651 67438]) ("jde-keymap-test" function (:arguments ("var")) nil [67509 67655]) ("jde-describe-map" function (:user-visible-flag t :arguments ("map")) nil [67657 68275]) ("jde-keys" function (:user-visible-flag t) nil [68277 68429]) ("jde-compile-file-if-necessary" function (:arguments ("file")) nil [68486 69090]) ("jde-compile-jde" function (:user-visible-flag t) nil [69107 69653]) ("jde-find-case-sensitive" variable (:user-visible-flag t) nil [70062 70297]) ("jde-find-granularity" variable (:user-visible-flag t :default-value (quote ("Character"))) nil [70337 70747]) ("jde-find-file-regexp" variable (:user-visible-flag t :default-value (quote ("*.java"))) nil [70750 71056]) ("jde-find-dialog" type (:superclasses "efc-dialog" :members (("expr-field" variable (:documentation "Edit field for expression to find.") nil nil) ("expression" variable (:documentation "Regular expression to find." :type "string") nil nil) ("dir-fields" variable (:documentation "List of directory path fields.") nil nil) ("dirs" variable (:documentation "Directories to search recursively." :type "list") nil nil) ("file-fields" variable (:documentation "Regular expression fields for files to search.") nil nil) ("files" variable (:documentation "Files to search." :default-value "(\"*.java\")" :type "list") nil nil) ("ignore-case-cb" variable (:documentation "Ignore case check box.") nil nil) ("ignore-case-p" variable (:documentation "If true, ignore case when searching." :default-value "t" :type "boolean") nil nil) ("grain-rbs" variable (:documentation "Granularity radio buttons.") nil nil) ("grain" variable (:documentation "Search granularity: Character, Word, Line" :default-value "Character" :type "string") nil nil) ("ok" variable (:documentation "True if user clicked the OK button." :default-value "nil" :type "boolean") nil nil) ("the-dialog" variable (:documentation "The only instance of the find expression dialog buffer." :static-flag t :default-value "nil" :type "(or null jde-find-dialog)") nil nil)) :type "class") nil [71058 72564]) ("initialize-instance" function (:parent "jde-find-dialog" :arguments ("this" "&rest" "fields")) nil [72566 72727]) ("efc-dialog-create" function (:parent "jde-find-dialog" :arguments ("this")) nil [72729 73993]) ("efc-dialog-show" function (:parent "jde-find-dialog" :arguments ("this")) nil [73996 74398]) ("efc-dialog-ok" function (:parent "jde-find-dialog" :arguments ("this")) nil [74401 75142]) ("efc-dialog-cancel" function (:parent "jde-find-dialog" :arguments ("this")) nil [75144 75439]) ("jde-find-root-history" variable nil nil [75443 75534]) ("jde-find-regexp-history" variable nil nil [75536 75628]) ("jde-find-grep-internal" function (:arguments ("regexp" "files" "&optional" "dirs" "no-case" "grain")) nil [75630 77002]) ("jde-find" function (:user-visible-flag t :arguments ("&optional" "regexp")) nil [77005 79117]) ("jde-find-dlg" function (:user-visible-flag t) nil [79119 79908]) ("jde-create-prj-values-str" function nil nil [79910 80397]) ("jde-bsh-buffer" type (:superclasses "bsh-comint-buffer" :type "class") nil [80399 80475]) ("initialize-instance" function (:parent "jde-bsh-buffer" :arguments ("this" "&rest" "fields")) nil [80477 80605]) ("jde-bsh" type (:superclasses "bsh" :members (("bsh-cmd-dir" variable (:documentation "Path of the BeanShell commmand directory." :type "string") nil nil) ("checkstyle-jar" variable (:documentation "Path of the Checkstyle jar." :type "string") nil nil) ("regexp-jar" variable (:documentation "Path of the Jakarta regexp jar." :type "string") nil nil) ("jde-jar" variable (:documentation "Path of the JDEE jar." :type "string") nil nil) ("jde-classes-dir" variable (:documentation "Path of the JDEE classes directory." :type "string") nil nil) ("the-bsh" variable (:documentation "The single instance of the JDEE's BeanShell." :static-flag t :type "jde-bsh") nil nil)) :type "class") nil [80607 81708]) ("initialize-instance" function (:parent "jde-bsh" :arguments ("this" "&rest" "fields")) nil [81710 82489]) ("bsh-create-buffer" function (:parent "jde-bsh" :arguments ("this")) nil [82491 82634]) ("bsh-build-classpath-argument" function (:parent "jde-bsh" :arguments ("this")) nil [82636 82756]) ("bsh-launch" function (:parent "jde-bsh" :arguments ("this" "&optional" "display-buffer")) nil [82758 84569]) ("jde-bsh" code nil nil [84611 84637]) ("jde-bsh-running-p" function nil nil [84639 84768]) ("jde-jeval" function (:arguments ("java-statement" "&optional" "eval-return")) nil [84771 85426]) ("jde-jeval-r" function (:arguments ("java-statement")) nil [85428 85879]) ("jde-jeval-cm" function (:arguments ("java-expr" "&optional" "buffer-head" "finish-fcn")) nil [85882 87948]) ("jde-bsh-run" function (:user-visible-flag t) nil [87966 88091]) ("jde-bsh-exit" function (:user-visible-flag t) nil [88093 88626]) ("jde-show-speedbar" function (:user-visible-flag t) nil [88629 88815]) ("jde-autoload-update" function (:user-visible-flag t) nil [88821 89274]) ("jde-browse-class-at-point" function (:user-visible-flag t) nil [89277 90272]) ("jde-self-test" function (:user-visible-flag t) nil [90355 90500]) ("jde-custom-adjust-groups" code nil nil [90583 90609]) ("jde" package nil nil [90611 90625]))
    :file "jde.el"
    :pointmax 113382
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
